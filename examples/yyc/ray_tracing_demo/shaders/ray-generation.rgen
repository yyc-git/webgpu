#version 460
#extension GL_NV_ray_tracing : require
#pragma shader_stage(raygen)

layout(location = 0) rayPayloadNV vec3 hitValue;

layout(set = 0, binding = 0) uniform accelerationStructureNV topLevelAS;

layout(std140, set = 0, binding = 1) buffer PixelBuffer {
  vec4 pixels[];
} pixelBuffer;

layout(set = 0, binding = 2) uniform Camera {
  mat4 viewInverse;
  mat4 projectionInverse;
} uCamera;

void main() {
  ivec2 ipos = ivec2(gl_LaunchIDNV.xy);
  const ivec2 resolution = ivec2(gl_LaunchSizeNV.xy);

  const vec2 offset = vec2(0);
  const vec2 pixel = vec2(ipos.x, ipos.y);
  const vec2 uv = (pixel / gl_LaunchSizeNV.xy) * 2.0 - 1.0;

  vec4 origin = uCamera.viewInverse * vec4(offset, 0, 1);
  vec4 target = uCamera.projectionInverse * (vec4(uv.x, uv.y, 1, 1));
  vec4 direction = uCamera.viewInverse * vec4(normalize(target.xyz), 0);

  hitValue = vec3(0);
  traceNV(topLevelAS, gl_RayFlagsOpaqueNV, 0xFF, 0, 0, 0, origin.xyz, 0.01, direction.xyz, 4096.0, 0);

  const uint pixelIndex = ipos.y * resolution.x + ipos.x;
  pixelBuffer.pixels[pixelIndex] = vec4(hitValue, 1);
}
